// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createBreve = `-- name: CreateBreve :execresult
INSERT INTO breve(redirect, link) VALUES(?, ?)
`

type CreateBreveParams struct {
	Redirect string
	Link     string
}

func (q *Queries) CreateBreve(ctx context.Context, arg CreateBreveParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createBreve, arg.Redirect, arg.Link)
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM breve
WHERE id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getBreve = `-- name: GetBreve :one
SELECT id, redirect, link, clicked, random, created FROM breve
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetBreve(ctx context.Context, id int32) (Breve, error) {
	row := q.db.QueryRowContext(ctx, getBreve, id)
	var i Breve
	err := row.Scan(
		&i.ID,
		&i.Redirect,
		&i.Link,
		&i.Clicked,
		&i.Random,
		&i.Created,
	)
	return i, err
}

const getBreves = `-- name: GetBreves :many
SELECT id, redirect, link, clicked, random, created FROM breve
ORDER BY created
`

func (q *Queries) GetBreves(ctx context.Context) ([]Breve, error) {
	rows, err := q.db.QueryContext(ctx, getBreves)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Breve
	for rows.Next() {
		var i Breve
		if err := rows.Scan(
			&i.ID,
			&i.Redirect,
			&i.Link,
			&i.Clicked,
			&i.Random,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
