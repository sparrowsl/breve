// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package database

import (
	"context"
)

const createLink = `-- name: CreateLink :exec
INSERT INTO links (redirect, url, random) 
VALUES ($1, $2, $3)
`

func (q *Queries) CreateLink(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createLink)
	return err
}

const deleteLink = `-- name: DeleteLink :exec
DELETE FROM links
WHERE id = $1
`

func (q *Queries) DeleteLink(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteLink)
	return err
}

const getLink = `-- name: GetLink :one
SELECT id, redirect, url, clicked, random, created_at 
FROM links
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetLink(ctx context.Context) (Link, error) {
	row := q.db.QueryRowContext(ctx, getLink)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Redirect,
		&i.Url,
		&i.Clicked,
		&i.Random,
		&i.CreatedAt,
	)
	return i, err
}

const listAllLinks = `-- name: ListAllLinks :many
SELECT id, redirect, url, clicked, random, created_at 
FROM links
ORDER BY created_at
`

func (q *Queries) ListAllLinks(ctx context.Context) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, listAllLinks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Link{}
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.Redirect,
			&i.Url,
			&i.Clicked,
			&i.Random,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLink = `-- name: UpdateLink :exec
UPDATE links 
SET 
  url = $1,
  redirect = $2,
  random = $3
WHERE id = $4
`

func (q *Queries) UpdateLink(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateLink)
	return err
}
